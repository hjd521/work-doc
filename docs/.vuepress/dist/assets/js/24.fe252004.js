(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{223:function(e,n,a){"use strict";a.r(n);var t=a(28),r=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"webpack基础名词解析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack基础名词解析"}},[e._v("#")]),e._v(" webpack基础名词解析")]),e._v(" "),a("h4",{attrs:{id:"module："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#module："}},[e._v("#")]),e._v(" module：")]),e._v(" "),a("ol",[a("li",[e._v("含义：模块，由资源(js,css,图片等)组成。")]),e._v(" "),a("li",[e._v("组成：id(自身的相对路径名称)，dependencies(自身所引入的依赖),name(表示module属于哪个入口)。")]),e._v(" "),a("li",[e._v("形成：资源由经过相对应的loader处理成为module。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("{\n  id: './src/title.js, //'自身相对于根路径的相对路径字符串\n  name: 'main', // entry中配置的key\n  dependencies: [], // 依赖子模块数组\n  _sourceCode: '', // 经过转化的资源内容\n}\n")])])]),a("h5",{attrs:{id:"chunk："}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chunk："}},[e._v("#")]),e._v(" chunk：")]),e._v(" "),a("ol",[a("li",[e._v("含义：由一组拥有者共同入口的module组成。")]),e._v(" "),a("li",[e._v("组成：name(entry中的key), entryModule(入口模块), modules(一组拥有相同name的module)。")]),e._v(" "),a("li",[e._v("作用：用来生成代码块(根据modules中的module和entryModule)。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  {\n    name: 'main', // entry中的key。\n    entryModule: module, // entry中的value对应的资源生成的module。\n    modules: [], 具有相同入口name的module的子module的集合。\n  }\n")])])]),a("h4",{attrs:{id:"chunk生成的代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chunk生成的代码"}},[e._v("#")]),e._v(" chunk生成的代码")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("  function getSource(chunk) {\n  return `\n   (() => {\n    var modules = {\n      ${\n          chunk.modules.map(module=>`\n          \"${module.id}\": (module,exports,require) => {\n            ${module._source}\n          }`).join(',')\n      }\n    };\n    var cache = {};\n    function require(moduleId) {\n      if (cache[moduleId]) {\n        return cache[moduleId].exports;\n      }\n      var module = (cache[moduleId] = {\n        exports: {},\n      });\n      modules[moduleId](module, module.exports, require);\n      return module.exports;\n    }\n    (() => {\n     ${chunk.entryModule._source}\n    })();\n  })();\n   `;\n}\n")])])])])}),[],!1,null,null,null);n.default=r.exports}}]);