(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{226:function(t,a,e){"use strict";e.r(a);var r=e(28),s=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"基础概念了解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础概念了解"}},[t._v("#")]),t._v(" 基础概念了解")]),t._v(" "),e("h4",{attrs:{id:"字节、位、字符编码。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#字节、位、字符编码。"}},[t._v("#")]),t._v(" 字节、位、字符编码。")]),t._v(" "),e("ul",[e("li",[t._v("1个字节由8个位(bite)组成，每个位都是二进制的o或者1。")]),t._v(" "),e("li",[t._v("一个字符或者字符都是由一个字节组成的。gbk中一个汉字由两个位组成，utf-8中有三个字节组成的。")]),t._v(" "),e("li",[t._v("常用的字符编码是：gbk编码，utf-8，nodejs中只支持utf-8编码。")])]),t._v(" "),e("h4",{attrs:{id:"进制的表示："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#进制的表示："}},[t._v("#")]),t._v(" 进制的表示：")]),t._v(" "),e("ul",[e("li",[t._v("二进制使用0b，8进制使用0o，16进制使用0x，10进制使用0d")])]),t._v(" "),e("h4",{attrs:{id:"将任意进制转换为10进制：利用parseint-num-base-的第二个参数指定num的进制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将任意进制转换为10进制：利用parseint-num-base-的第二个参数指定num的进制"}},[t._v("#")]),t._v(" 将任意进制转换为10进制：利用parseInt(num, base)的第二个参数指定num的进制")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("// 将二进制10转化为10进制2\nconsole.log('将二进制转化为10进制',parseInt('10', 2))\n// 将8进制10转换为十进制8\nconsole.log('将8进制转化为10进制',parseInt('10', 8))\n// 将16进制10转换为十进制16\nconsole.log('将8进制转化为10进制',parseInt('10', 16))\n")])])]),e("h4",{attrs:{id:"将任意进制转换为任意进制：利用tostring-base-指定转换后的字符的进制。"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#将任意进制转换为任意进制：利用tostring-base-指定转换后的字符的进制。"}},[t._v("#")]),t._v(" 将任意进制转换为任意进制：利用toString(base)指定转换后的字符的进制。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  // 将16进制转换为10进制\n  console.log(0x16.toString())\n  // 将16进制转换为2进制\n  console.log(0x16.toString(2))\n")])])]),e("h4",{attrs:{id:"针对于二进制的位运算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#针对于二进制的位运算"}},[t._v("#")]),t._v(" 针对于二进制的位运算 | & <<")]),t._v(" "),e("ol",[e("li",[t._v("| 或运算，只有有一个位置是1，那么这个位的结果就是1")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let re = ob10 | ob11 // ob11\nconsole.log(re)\n// 判断一个数是奇数还是偶数(如果是奇数的话转换为二进制那么最后一位肯定是1)\nfunction judge(num) {\n  return num | 1\n}\n// 判断偶数\nfunction judge(num) {\n  return !(num | 1)\n}\n// vue3中也用来来判断节点的类型\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("& 且运算，只有两个位置都是1，那么这个位的结果才是1")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  let re = ob10 | ob11 // ob10\n  console.log(re)\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("<<,将符号左边的数字右移符号右边的数字位，得到的结果")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  let re = 1 << 2 // 100=4\n  console.log(r)\n")])])]),e("h4",{attrs:{id:"buffer的特性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#buffer的特性"}},[t._v("#")]),t._v(" buffer的特性")]),t._v(" "),e("ul",[e("li",[t._v("buffer是node中的最小单位")]),t._v(" "),e("li",[t._v("buffer生命后长度不可改变")]),t._v(" "),e("li",[t._v("buffer可以和字符串相互转换")])]),t._v(" "),e("h4",{attrs:{id:"定义一个buffer的三种方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#定义一个buffer的三种方法"}},[t._v("#")]),t._v(" 定义一个buffer的三种方法")]),t._v(" "),e("ol",[e("li",[t._v("通过直接传入数字定义一个buffer，代表这个buffer的长度，默认各个位为以0为值。可用第二个参数进行改变默认值：Buffer.alloc(number, number)")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let buf = Buffer.alloc(10, 1)\nconsole.log(buf)\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("通过传入字符串来定义，Buffer.from(string:param):Buffer.from('侯建东')")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  let name = Buffer.from('侯建东')\n  console.log(name)\n")])])]),e("h4",{attrs:{id:"buffer转换为字符串-通过tostring方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#buffer转换为字符串-通过tostring方法"}},[t._v("#")]),t._v(" buffer转换为字符串:通过toString方法")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  let buf = Buffer.form('侯建东')\n  let original = buf.toString()\n  console.lopg(original)\n")])])]),e("h4",{attrs:{id:"buffer的常用api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#buffer的常用api"}},[t._v("#")]),t._v(" buffer的常用api")]),t._v(" "),e("ol",[e("li",[t._v("判断是否为buffer")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("let buf = Buffer.from('s')\nBuffer.isBuffer(buf)\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("copy方法，将buffer赋值到目标buffer上(targetBuffer, stargetStart, sourceStart, sourceEnd)")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  let bufSource = Buffer.from('小猫')\n  let targetBuf = Buffer.alloc(bufSource.length)\n  bufSource.copy(targetBuf, 0)\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("concat方法，将多个buffer合并成一个([...bufferList])")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("  let buf1 = Buffer.from('侯')\n  let buf2 = Buffer.from('建')\n  let buf3 = Buffer.from('东')\n  let newBuf = Buffer.concat([buf1, buf2, buf3])\n")])])]),e("ol",{attrs:{start:"4"}},[e("li")])])}),[],!1,null,null,null);a.default=s.exports}}]);