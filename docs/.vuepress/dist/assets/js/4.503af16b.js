(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{201:function(e,r,a){e.exports=a.p+"assets/img/loader.495d31c8.png"},225:function(e,r,a){"use strict";a.r(r);var o=a(28),l=Object(o.a)({},(function(){var e=this,r=e.$createElement,o=e._self._c||r;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("h3",{attrs:{id:"loader"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#loader"}},[e._v("#")]),e._v(" loader")]),e._v(" "),o("h4",{attrs:{id:"loader的功能以及作用。"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#loader的功能以及作用。"}},[e._v("#")]),e._v(" loader的功能以及作用。")]),e._v(" "),o("ul",[o("li",[e._v("loader用来处理资源，将资源转换成js能识别的文本。通常返回一个文本，这个文本可以用module.exports进行导出一些给到的文本。")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v('  // 比如style-loader,当我们require一个css文件时候。我们需要做的只是将接收到的css内容放到style标签中并且插入html中。\n  function styleLoader(source) {\n    var script = `\n    let style = document.createElement("style");\n      style.innerHTML = ${JSON.stringify(source)};\n    document.head.appendChild(style);\n    module.exports = "";\n    `\n  }\n')])])]),o("h4",{attrs:{id:"loader的分类-通过loader的执行顺序分类"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#loader的分类-通过loader的执行顺序分类"}},[e._v("#")]),e._v(" loader的分类(通过loader的执行顺序分类)")]),e._v(" "),o("ol",[o("li",[e._v("inline-loader写在require代码中的，用！分隔各个loader，最后为资源。")]),e._v(" "),o("li",[e._v("post-loader,定义在module.rules中的通过enforce:post来定义。")]),e._v(" "),o("li",[e._v("normal-loader,定义在module.rules中，默认就是normal-loader。")]),e._v(" "),o("li",[e._v("pre-loader，定义在module.rules中，通过enforece:pre来定义。")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("  module: {\n    rules: [{\n      test: /\\.js$/,\n      use: [\n        {\n          loader: 'log-loader',\n          enforce: 'pre'\n        },\n        {\n          loader: 'babel-loader',\n          enforce: 'post'\n        }\n      ]\n    }]\n  }\n")])])]),o("h4",{attrs:{id:"loader函数中的pitch"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#loader函数中的pitch"}},[e._v("#")]),e._v(" loader函数中的pitch")]),e._v(" "),o("ul",[o("li",[e._v("loader中的pitch是一个函数，如果有返回值，那么laoder就会中断执行流程。找到preLoader执行他们的普通流程。\n"),o("img",{attrs:{src:a(201),alt:"An image"}})])]),e._v(" "),o("h4",{attrs:{id:"loader处理函数的实现流程"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#loader处理函数的实现流程"}},[e._v("#")]),e._v(" loader处理函数的实现流程")]),e._v(" "),o("ol",[o("li",[e._v("拿到需要处理资源的路径作为resource。")]),e._v(" "),o("li",[e._v("将匹配资源的loader根据类型进行组装[post-loader, inline-loader, normal-loader, pre-loader]组装成laoder数组。")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("  let fs = require('fs')\n  let resource = path.resolve(__dirname, 'src', 'main.js')\n  let rules = module.rules\n  let preLoaders = []\n  let normalLoaders = []\n  let postLoaders = []\n  let loaders = []\n  for (let rulse of rules) {\n    if (rule.test.test(resource)) {\n      if (rule.enforce === 'pre') {\n        preLoaders = [...preLoaders, ...rule.use]\n      } else if(rule.enforce === 'post') {\n        postLoaders = [...postLoaders, ...rule.use]\n      } else {\n        normalLoaders = [...normalLoaders, ...rule.use]\n      }\n    }\n  }\n  loaders = [...postLoaders, ...normalLoaders, ...preLoaders]\n  runLoaders({\n    resouce,\n    loaders,\n    context: {},\n    readResource: fs.readFile.bind(fs)\n  })\n")])])]),o("ol",{attrs:{start:"3"}},[o("li",[e._v("这个时候我们拿到了需要处理的资源resource和已经整理好的laoders，那么接下来我们执行runLoaders来用各个loader处理资源。")])]),e._v(" "),o("ul",[o("li",[e._v("目标1，让各个loader处理资源并且传递到下一个loader继续处理。")]),e._v(" "),o("li",[e._v("目标2，loader函数中可以通过this执行一些我们定义好的方法，比如this.async()异步执行，this.callback()执行下个loader")])]),e._v(" "),o("ol",{attrs:{start:"4"}},[o("li",[e._v("构建每个loader的上下文对象，让loader函数可以通过this来调用一些提供的方法")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("runLoaders({resource, loaders, context, readSource}) {\n  let loaderContext = context\n  loaderContext.resource = resource\n  loaderContext.loaders\n  loaderContext.callback = null\n  loaderContext.async = false // loader的执行是否是异步的\n  loaderContext.loaderIndex = 0 // 定义当前执行的是哪个loader\n  loaderContext.readSource = readSource\n  let processOptions = {\n    resourceBuffer: null\n  }\n  processResource(processOptions, loaderContext, () => {\n    console.log('执行完成')\n  })\n}\n")])])]),o("ol",{attrs:{start:"4"}},[o("li",[e._v("(*): 这里需要单独对loaders做一些处理，将loader的具体内容拿到，并且定义loader的raw(是否需要buffer)，normal(loader的定义), pitch(loader中的pitch函数)方便以后调用。")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("  loaderContext.loaders = loaders.map(createLoader)\n  function createLoader(loader) {\n    let obj = {\n      request: loader,\n      pitchExecuted: false, // 是否已经执行过pitch方法\n      normalExecuted: false // 是否已经执行过loader。\n    }\n    obj.normal = require(loader)\n    obj.raw = obj.normal.raw\n    obj.pitch = obj.normal.pitch\n    return obj\n  }\n")])])]),o("ol",{attrs:{start:"5"}},[o("li",[e._v("拿到资源的具体内容然后顺序调用loaders中的数组(此处省略了pitch的过程，此过程和normal过程类似)")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("  function processResource(processOptions, loaderContext, callbak) {\n    loaderContext.loaderIndex = loaderContext.loaders.length - 1;\n    loaderContext.readResource(loaderContext.resource, function(err, buf) {\n      processOptions.resourceBuffer = buf\n      iterateNormalLoaders(processOptions, loaderContext, callback)\n    })\n  }\n")])])]),o("ol",{attrs:{start:"6"}},[o("li",[e._v("定义iterateNormalLoaders函数实现核心的loader调用逻辑。")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("  function iterateNormalLoaders(processOptions, loaderContext, callback) {\n    if (loaderContext.loaderIndex <0) {\n      callback(null, processOptions.resourceBuffer)\n    }\n    let curLoader = loaderContext.loaders[oaderContext.loaderIndex]\n    if (curLoader.normalExecuted) {\n      loaderContext.loaderIndex --\n      return iterateNormalLoaders(processOptions, loaderContext, callback)\n    }\n    let fn = curLoader.normal\n    curLoader.normalExecuted = true;\n    if (!normal) {\n      loaderContext.loaderIndex --\n      return iterateNormalLoaders(processOptions, loaderContext, callback)\n    }\n    handleBuf(processOptions, curLoader)\n    runSyncOrAsync(fn, processOptions, function(err) {\n      if (err) {\n        return  callback(err)\n      }\n      iterateNormalLoaders(processOptions, curLoader, loaderContext, callback)\n    })\n  }\n")])])]),o("ol",{attrs:{start:"7"}},[o("li",[e._v("根据loader需要的资源类型来转换资源类型，当laoder中定义了raw=true的时候需要将资源转换为buffer，否则为字符串")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("  function handleBuf(processOptions, loader) {\n    let resource = processOptions.resourceBuffer\n    if (loader.raw && !Buffer.isBuffer(resource)) {\n      processOptions.resourceBuffer = Buffer.from(resource)\n    }\n    if (!loader.raw && Buffer.isBuffer(resource)) {\n      processOptions.resourceBuffer = resource.toString('utf-8')\n    }\n  }\n")])])]),o("ol",{attrs:{start:"8"}},[o("li",[e._v("拿到laoder需要的资源类型以及loader的函数之后，开始正式执行loader。")])]),e._v(" "),o("ul",[o("li",[e._v("1: 实现每个任务流水线式执行")]),e._v(" "),o("li",[e._v("2：实现loader中可以通过callback返回内容并且传递给下一个loader")]),e._v(" "),o("li",[e._v("3：实现loader中可以通过async()方法异步执行，在执行完毕之后通过this.callback方法传递参数给下一个loader。")])]),e._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",{pre:!0,attrs:{class:"language-text"}},[o("code",[e._v("  function runSyncOrAsync(processOptions, curLoader, loaderContext, callback) {\n    let isSync = true\n    let isDone = false\n    loaderContext.callback = function(err, ...args) {\n      isSync = false\n      callback(err, args)\n    }\n    loaderContext.async = function() {\n      isSync = false\n      return loaderContext.callback\n    }\n    let result = curLoader.call(loaderContext, processOptions.resourceBuffer)\n    if (!isResult) {\n      callback(null, result)\n    }\n  }\n")])])])])}),[],!1,null,null,null);r.default=l.exports}}]);