(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{214:function(e,t,n){"use strict";n.r(t);var r=n(28),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"实现resolvepromise方法，处理then中回调返回的值。"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现resolvepromise方法，处理then中回调返回的值。"}},[e._v("#")]),e._v(" 实现resolvePromise方法，处理then中回调返回的值。")]),e._v(" "),n("ol",[n("li",[e._v("如果是普通值那么直接resolve出去")]),e._v(" "),n("li",[e._v("如果是新的promose实例或者有then属性，那么转换为promise。调用then方法call(x)并且绑定回调，在回调中继续递归调用resolvePromise。")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("  function resolvePromise(promise2, x, resolve, reject) {\n    if (promise2 === x) {\n      throw new Error('duplite promise!')\n    }\n    if ((typeof(x) === 'object' && x !== null) || typeof x = 'function') {\n      let then = x.then\n      if (then) {\n        then.call(x, function(y) {\n          resolvePromise(promise2, y, resolve, reject)\n        })\n      }\n    } else {\n      resolve(x)\n    }\n  }\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);